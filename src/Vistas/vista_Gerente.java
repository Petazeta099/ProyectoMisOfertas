/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Conexion.Database;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Jonathan
 */
public class vista_Gerente extends javax.swing.JFrame {

    /**
     * Creates new form vista_Gerente
     */
    public vista_Gerente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnReporte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnReporte.setText("Obtener reporte");
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(btnReporte)
                .addContainerGap(145, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(btnReporte)
                .addContainerGap(162, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        // poner el metodo de abajo aqui
    }//GEN-LAST:event_btnReporteActionPerformed

    /**
     * @param args the command line arguments
     */
   private void crearReporteGerente_COPYPASTE_REHACER() throws FileNotFoundException, DocumentException {
        
        Document documento = new Document();
        
        
        File desktopDir = new File(System.getProperty("user.home"), "Desktop");
        System.out.println(desktopDir.getPath() + " " + desktopDir.exists());
        String pathToDesktop = desktopDir.getPath();
        //FileOutputStream out =  new FileOutputStream(new File(pathToDesktop+System.getProperty("file.separator")+"pdf de prueba.pdf"));
        PdfWriter.getInstance(documento, new FileOutputStream(new File(pathToDesktop+System.getProperty("file.separator")+"Reporte accesos.pdf")));
        
        documento.open();
        documento.add(new Paragraph("Descripción de actividad de los clientes"));
        documento.add(new Paragraph("   "));

        Database cnOfertas = new Database();
        Database cnValoracion = new Database();
        Database cnEvaluacion = new Database();
        int contador = 0;

        String sqlOfertas = "select * from oferta WHERE encargado_run = ?";
        ResultSet listaOfertas = null;
        PreparedStatement psOfertas = null;

        String sqlValoracion = "select * from valoracion WHERE oferta_id = ?";
        ResultSet listaValoracion = null;
        PreparedStatement psValoracion = null;
        
        String sqlEvaluacion = "select * from evaluacion WHERE id = ?";
        ResultSet listaEvaluacion = null;
        PreparedStatement psEvaluacion = null;

        try {

            psOfertas = cnOfertas.getConnection().prepareStatement(sqlOfertas);

            listaOfertas = psOfertas.executeQuery();
            while (listaOfertas.next()) {

                com.itextpdf.text.Font dataRedFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, BaseColor.RED);
                com.itextpdf.text.Font dataBlueFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, BaseColor.BLUE);
                com.itextpdf.text.Font dataBlackFont = FontFactory.getFont("Garamond", 13, BaseColor.BLACK);
                com.itextpdf.text.Font dataBoldFont = FontFactory.getFont(FontFactory.TIMES_BOLD, 14, BaseColor.BLACK);
                
                Paragraph p = new Paragraph();
                Paragraph p1 = new Paragraph();
                Paragraph p2 = new Paragraph();
                Paragraph p3 = new Paragraph();

                p.add(new Chunk("ID DE LA OFERTA: ", dataRedFont));
                p.add(new Chunk(listaOfertas.getString(1), dataBlackFont));
                documento.add(p);
                p1.add(new Chunk("TITULO: ", dataRedFont));
                p1.add(new Chunk(listaOfertas.getString(2), dataBlackFont));
                documento.add(p1);
                p2.add(new Chunk("DESCRIPCIÓN: ", dataRedFont));
                p2.add(new Chunk(listaOfertas.getString(3), dataBlackFont));
                documento.add(p2);
                
                
                

                /*
                com.itextpdf.text.Font azul = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14);
                azul.setColor(BaseColor.BLUE);
                
                Chunk id = new Chunk("ID DE LA OFERTA: " + listaOfertas.getString(1), azul);
                Chunk titulo = new Chunk("TITULO: " + listaOfertas.getString(2), azul);
                Chunk descripcion = new Chunk("DESCRIPCIÓN: " + listaOfertas.getString(3), azul);
                
                documento.add(new Paragraph(id));
                documento.add(new Paragraph(titulo));
                documento.add(new Paragraph(descripcion));
                 */
                psValoracion = cnValoracion.getConnection().prepareStatement(sqlValoracion);
                psValoracion.setInt(1, Integer.parseInt(listaOfertas.getString(1)));
                listaValoracion = psValoracion.executeQuery();

                while (listaValoracion.next()) {
                    contador = contador + 1;
                    /*
                    documento.add(new Paragraph("  "));
                    documento.add(new Paragraph("   " + contador + ".- Valoracion id: " + listaValoracion.getString(1) + ", calificación: " + listaValoracion.getString(2)));
                     */
                    documento.add(new Paragraph("  "));
                    p3.add(new Chunk("   " + contador, dataBlueFont));
                    p3.add(new Chunk(".- Valoracion id: " + listaValoracion.getString(1) + ", calificación: " + listaValoracion.getString(2), dataBlackFont));
                    documento.add(p3);
                    
                    psEvaluacion = cnEvaluacion.getConnection().prepareStatement(sqlEvaluacion);
                    psEvaluacion.setInt(1, Integer.parseInt(listaValoracion.getString(1)));
                    listaEvaluacion = psEvaluacion.executeQuery();
                    
                    while(listaEvaluacion.next()){
                    documento.add(new Paragraph("   Comentario: "+listaEvaluacion.getString(4)));
                    
                    //String rutAcortado = run.substring(0, run.indexOf("-"));
                    
                    documento.add(new Paragraph("   Con fecha: "+listaEvaluacion.getString(2).substring(0,listaEvaluacion.getString(2).indexOf(" "))));
                    documento.add(new Paragraph("  "));
                    }

                }
                listaValoracion = psValoracion.executeQuery();
                if (listaValoracion.next() !=true) {
                    
                    documento.add(new Paragraph("  "));
                    documento.add(new Paragraph("No existen valoraciones",dataBoldFont));
                }

                documento.add(new Paragraph(" "));
                contador = 0;
            }

            JOptionPane.showMessageDialog(this, "Documento creado en el escritorio con nombre *Reporte valorizaciones*.");
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this, "Error al crear el documento.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this, "Error al crear el documento.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
        }
        documento.close();
    }
    public String obtRut() {
        String rutGerente = login_Gerente.rut_gerente;
        String rutsinDigito = rutGerente.substring(0, rutGerente.length() - 1);
        String rutDigito = rutGerente.substring(rutGerente.length() - 1);
        String rutFinal = rutsinDigito + "-" + rutDigito;

        System.out.println(rutFinal);
        return rutFinal;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReporte;
    // End of variables declaration//GEN-END:variables
}
